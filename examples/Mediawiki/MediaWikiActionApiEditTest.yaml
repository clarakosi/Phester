# Tested on a local wiki instance with edit and delete permission granted to all users
#
#  $wgGroupPermissions['*']['edit'] = true;
#  $wgGroupPermissions['*']['delete'] = true;
#
# TODO: Add variable extraction option to be able to login, get CSRF token, and run tests w/ token

suite: MediaWiki action API CRUD
description: Testing page creation, edit, and delete in MediaWiki's action API
type: RPC

use-fixtures:
  - Alice
  - Robby
  - Mindy

tests:
  - description: Create, edit, and delete a page
    interaction:

      # create and check content
      - request:
          method: post
          path: api.php
          parameters:
            action: edit
            title: phester
            createonly: true
            format: json
          form-data:
            summary: phester test
            text: A test page for phester
            token: +\
        response:
          body:
            edit:
              result: Success
      - request:
          path: api.php
          parameters:
            action: parse
            page: phester
            format: json
        response:
          headers:
            content-type: !pcre/pattern: /application\/json/
          body: !pcre/pattern: /A test page for phester/

      # modify and check content
      - request:
          method: post
          path: api.php
          form-data:
            action: edit
            title: phester
            format: json
            summary: phester edit
            text: Editing a test page for phester
            token: +\
        response:
          body:
            edit:
              result: Success
      - request:
          path: api.php
          parameters:
            action: parse
            page: phester
            format: json
        response:
          headers:
            content-type: !pcre/pattern: /application\/json/
          body: !pcre/pattern: /Editing a test page for phester/

      # delete and check that it's gone
      - use-session: Mindy
        request:
          method: post
          path: api.php
          form-data:
            action: delete
            title: phester
            format: json
            token: p/var: Mindy/deletion-token
        response:
          body:
            delete:
              title: Phester
      - request:
          path: api.php
          parameters:
            action: parse
            page: phester
            format: json
        response:
          body:
            error:
              code: "missingtitle"

  - description: Create, delete, undelete a page
    interaction:

      # create 
      - request:
          method: post
          path: api.php
          parameters:
            action: edit
            title: UndeletionTest
            createonly: true
            format: json
          form-data:
            summary: phester test
            text: A test page for phester
            token: +\
        response:
          headers:
            content-type: !pcre/pattern: /application\/json/
          body:
            edit:
              result: Success


      # delete and check that it's gone
      - use-session: Mindy
        request:
          method: post
          path: api.php
          form-data:
            action: delete
            title: UndeletionTest
            format: json
            token: p/var: Mindy/deletion-token
        response:
          body:
            delete:
              title: UndeletionTest
      - request:
          path: api.php
          parameters:
            action: parse
            page: UndeletionTest
            format: json
        response:
          body:
            error:
              code: "missingtitle"

      # undelete and check that the page is accessible again
       - use-session: Mindy
        request:
          method: post
          path: api.php
          form-data:
            action: undelete
            title: UndeletionTest
            format: json
            token: p/var: Mindy/deletion-token
        response:
          body:
            undelete:
              title: UndeletionTest

     - request:
          path: api.php
          parameters:
            action: parse
            page: UndeletionTest
            format: json
        response:
          headers:
            content-type: !pcre/pattern: /application\/json/
          body: !pcre/pattern: /A test page for phester/
          
  - description: check bot flag is applied correctly
    # use a unique page title
    variables:
      title: p/uniq: "BotFlagTest_"
      
    interaction:
    - request:
        use-session: Alice
        method: post
        path: api.php
        parameters:
          action: edit
          format: json
        form-data:
          token: p/var: Alice/edit-token # token must match session
          comment: non-bot edit
          text: non-bot text
          bot: 1
      response:
        body:
          edit:
            result: Success
            newrevid: p/grab: non-bot-edit-id

    - request:
        use-session: Robbie
        method: post
        path: api.php
        parameters:
          action: edit
          format: json
        form-data:
          token: p/var: Robbie/edit-token
          comment: unflagged edit
          text: unflagged text
      response:
        body:
          edit:
            result: Success
            newrevid: p/grab: unflagged-edit-id

    - request:
        use-session: Robbie
        method: post
        path: api.php
        parameters:
          action: edit
          format: json
        form-data:
          token: p/var: Robbie/edit-token
          comment: bot edit
          text: bot text
          bot: 1
      response:
        body:
          edit:
            result: Success
            newrevid: p/grab: bot-edit-id

    # check bot flags in RC feed
    - request:
          path: api.php
          parameters:
            action: query
            list: recentchanges
            rctype: edit
            format: json
            titles: p/var: title # only get changes to the page created for this test
        response:
          status: 200
          headers:
            content-type: application/json; charset=utf-8
          body:
            query:
              recentchanges:
                #note: newest first
                - revid: p/var: bot-edit
                  bot: ""
                - revid: p/var: unflagged-edit
                  bot: null # do we need a better way to check that a key is not set? will this work?
                - revid: p/var: non-bot-edit
                  bot: p/not-exists # ...maybe like this?
